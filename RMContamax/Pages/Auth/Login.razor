@page "/Login"

@using RMContamax.Authentication;

@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3"><input @bind="model.UserName" type="text" class="form-control" placeholder="Usuario" /></div>
        <div class="mb-3"><input @bind="model.Password" type="password" class="form-control" placeholder="Password" /></div>

        <div class="mb-3"><button @onclick="Authenticate" class="btn btn-outline-primary"> Iniciar Sesión </button></div>
    </div>
</div>

@code {
    class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }
    Model model = new();

    public async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if (userAccount == null ||
            userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "¡Las credenciales ingresadas no son válidas!.");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState
        (new UserSesion { UserName = userAccount.UserName, Role = userAccount.Role });
        navManager.NavigateTo("/", true);
    }
}
